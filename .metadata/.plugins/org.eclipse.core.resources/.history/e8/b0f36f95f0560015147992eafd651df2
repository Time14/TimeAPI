package time.api;

import org.lwjgl.Sys;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GLContext;

import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.system.MemoryUtil.*;

import java.nio.ByteBuffer;

public class Game {
	
	//v-sync?
	public static final boolean VSYNC = true;
	
	//Window properties
	private String title;
	private int width, height;
	
	//The window handle
	private long window;
	
	
	private GLFWErrorCallback errorCallback;
	
	/**
	 * 
	 * Starts the game with the specified window properties.
	 * This process includes initializing the GLFW library as well as the GameStateManager.
	 * 
	 * @param title - the title of the window
	 * @param width - the width of the window
	 * @param height - the height of the window
	 */
	public final void run(String title, int width, int height) {
		this.title = title;
		this.width = width;
		this.height = height;
		
		init();
		loop();
		
		glfwDestroyWindow(window);
		glfwTerminate();
		errorCallback.release();
	}
	
	/**
	 * 
	 * Sets up the GLFW necessities.
	 * 
	 */
	private final void init() {
		
		System.out.println("LWJGL v" + Sys.getVersion());
		
		//Sets the error callback
		glfwSetErrorCallback(errorCallback = errorCallbackPrint(System.err));
		
		//Initializes GLFW
		if(glfwInit() != GL11.GL_TRUE)
			throw new IllegalStateException("Failed to initialize GLFW");
		
		//Loads default window properties
		glfwDefaultWindowHints();
		
		//Disable window visibility to hide loading phase
		glfwWindowHint(GLFW_VISIBLE, GL11.GL_FALSE);
		
		//Disable resizability
		glfwWindowHint(GLFW_RESIZABLE, GL11.GL_TRUE);
		
		//Creates the window and assigns the handle
		window = glfwCreateWindow(width, height, title, NULL, NULL);
		
		//Fetch monitor properties
		ByteBuffer vidmode  = glfwGetVideoMode(glfwGetPrimaryMonitor());
		
		//Center window
		glfwSetWindowPos(
				window,
				(GLFWvidmode.width(vidmode) - width) / 2,
				(GLFWvidmode.height(vidmode) - height) / 2
		);
		
		//Make the OpenGL context current for this window
		glfwMakeContextCurrent(window);
		
		//Enables vsync depending on VSYNC boolean
		glfwSwapInterval(VSYNC ? 1 : 0);
		
		//Displays window
		glfwShowWindow(window);
	}
	
	private void loop() {
		GLContext.createFromCurrent();
		System.out.println("OpenGL v" + GL11.glGetString(GL11.GL_VERSION));
		
		GL11.glClearColor(0, 0, 0, 1);
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
		glfwSwapBuffers(window);
		
		while(glfwWindowShouldClose(window) == GL11.GL_FALSE) {
			glfwSwapBuffers(window);
			glfwPollEvents();
		}
	}
	
}