package physics;

import java.util.HashSet;

import advancedMath.Vector2f;
import debug.Debug;

/*
 * PhysicsEngine - Holds all bodies
 * 		HashMap With bodies
 * 		Update(delta time)
 * 		AddBody()
 * Body - Something that can simulate physics, with a collider. (Trigger or not)
 * 		Trigger
 * 		iMass
 * 		Elasticity
 * 		W, H
 * 		Position
 * 		Scale
 * 		Velocity
 * 		CheckCollision(body-b)
 * Collision - A collision event, with all the information needed to solve it. 
 * 		Body[] bodies
 * 		normal
 * 		depth
 * 		Solve()
 * 		Move()
 * 
 * NewPackage "Debug"
 * Debug - A debug class that holds helper functions and is static
 * 		DrawSquare(x, y, w, h)
 * 		Log(Message)
 */

public class PhysicsEngine {
	
	//TODO: Structure before writing!
	
	private boolean col = false;
	
	private HashSet<Body> bodies;
	private HashSet<Collision> collisions;
	//private HeshSet<Collision> collisions;
	
	public PhysicsEngine() {
		bodies = new HashSet<Body>();
		collisions = new HashSet<Collision>();
	}
	
	public PhysicsEngine update(float delta) {
		
		if(col) return this;
		
		Vector2f gravity = new Vector2f(0, -1.5f);
		gravity.scale(delta);
		for(Body a : bodies) {
			a.addVel(gravity);
			a.update(delta);
		}
		
		for(Body a : bodies) {
			for(Body b : bodies) {
				a.checkCollision(b, pe);
			}
		}
		
		for (Collision c : collisions) {
		 	c.solve();
		 	c.move();
		 	col = true;
		}
		collisions.clear();
		
		return this;
	}
	
	/**
	 * A function that draws all bodies, horribly inefficient!
	 * @return
	 */
	public PhysicsEngine _debugDraw() {
		for(Body b : bodies)
			Debug.drawRect(b);
		return this;
	}
	
	public PhysicsEngine addBody(Body body) {
		bodies.add(body);
		return this;
	}
	
	public PhysicsEngine addCollision(Collision col) {
		collisions.add(col);
		return this;
	}
}
